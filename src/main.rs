use std::io;

fn main() {
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Unable to read input");
    let mut hex = String::with_capacity(input.len() * 3);
    input.chars().for_each(|letter| {
        match letter {
            'А' => hex += "CO ",
            'Б' => hex += "C1 ",
            'В' => hex += "C2 ",
            'Г' => hex += "C3 ",
            'Д' => hex += "C4 ",
            'Е' => hex += "C5 ",
            'Ж' => hex += "C6 ",
            'З' => hex += "C7 ",
            'И' => hex += "C8 ",
            'Й' => hex += "C9 ",
            'К' => hex += "CA ",
            'Л' => hex += "CB ",
            'М' => hex += "CC ",
            'Н' => hex += "CD ",
            'О' => hex += "CE ",
            'П' => hex += "CF ",
            'Р' => hex += "D0 ",
            'С' => hex += "D1 ",
            'Т' => hex += "D2 ",
            'У' => hex += "D3 ",
            'Ф' => hex += "D4 ",
            'Х' => hex += "D5 ",
            'Ц' => hex += "D6 ",
            'Ч' => hex += "D7 ",
            'Ш' => hex += "D8 ",
            'Щ' => hex += "D9 ",
            'Ъ' => hex += "DA ",
            'Ы' => hex += "DB ",
            'Ь' => hex += "DC ",
            'Э' => hex += "DD ",
            'Ю' => hex += "DE ",
            'Я' => hex += "DF ",
            'а' => hex += "E0 ",
            'б' => hex += "E1 ",
            'в' => hex += "E2 ",
            'г' => hex += "E3 ",
            'д' => hex += "E4 ",
            'е' => hex += "E5 ",
            'ж' => hex += "E6 ",
            'з' => hex += "E7 ",
            'и' => hex += "E8 ",
            'й' => hex += "E9 ",
            'к' => hex += "EA ",
            'л' => hex += "EB ",
            'м' => hex += "EC ",
            'н' => hex += "ED ",
            'о' => hex += "EE ",
            'п' => hex += "EF ",
            'р' => hex += "F0 ",
            'с' => hex += "F1 ",
            'т' => hex += "F2 ",
            'у' => hex += "F3 ",
            'ф' => hex += "F4 ",
            'х' => hex += "F5 ",
            'ц' => hex += "F6 ",
            'ч' => hex += "F7 ",
            'ш' => hex += "F8 ",
            'щ' => hex += "F9 ",
            'ъ' => hex += "FA ",
            'ы' => hex += "FB ",
            'ь' => hex += "FC ",
            'э' => hex += "FD ",
            'ю' => hex += "FE ",
            'я' => hex += "FF ",
            ' ' => hex += "20 ",
            ',' => hex += "2C ",
            '.' => hex += "2E ",
            '0' => hex += "30 ",
            '1' => hex += "31 ",
            '2' => hex += "32 ",
            '3' => hex += "33 ",
            '4' => hex += "34 ",
            '5' => hex += "35 ",
            '6' => hex += "36 ",
            '7' => hex += "37 ",
            '8' => hex += "38 ",
            '9' => hex += "39 ",
            _ => hex.push(letter),
        }
    });
    print!("{}", hex);
    let mut binary = String::with_capacity(hex.len() * 3);
    hex.chars().for_each(|letter| {
        match letter {
            '0' => binary += "0000",
            '1' => binary += "0001",
            '2' => binary += "0010",
            '3' => binary += "0011",
            '4' => binary += "0100",
            '5' => binary += "0101",
            '6' => binary += "0110",
            '7' => binary += "0111",
            '8' => binary += "1000",
            '9' => binary += "1001",
            'A' => binary += "1010",
            'B' => binary += "1011",
            'C' => binary += "1100",
            'D' => binary += "1101",
            'E' => binary += "1110",
            'F' => binary += "1111",
            _ => binary.push(letter),
        }
    });
    print!("{}", binary);
}
